#!/usr/bin/env groovy

def PROJECT = "semics-appV9"
def TEAM = "semics"
def label = "${PROJECT}-${UUID.randomUUID().toString()}"
def MAVEN_OPTIONS = "-DskipTests"
def APP_CLUSTER_URL="https://sample-java-app-dev-79f9a43d.hcp.westus2.azmk8s.io"
def IMAGE_URL="https://acrsharedcommon81948.azurecr.io"


podTemplate(
    label: label,
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:18.02', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
        hostPathVolume(hostPath: '/root/.m2', mountPath: '/root/.m2')
    ]
) {
    node(label) {
        def commitId
        def app = "${PROJECT.toLowerCase()}"
        def image
        def customImage
        
        stage ('Checkout') {
            checkout scm
            commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        }

        stage ('Build') {
            container ('maven') {
                sh """
                mvn clean install $MAVEN_OPTIONS
               """
            }
        }
        
        stage ('Test') {
            container ('maven') {
              //  sh """
                //mvn test
                //"""
            }
        }

        stage ('Docker build and push') {
            container ('docker') {

                          docker.withRegistry("${IMAGE_URL}", 'registry-credentials-id') {
                             imageName = "${TEAM}/${PROJECT.toLowerCase()}"
                             customImage = docker.build(imageName)
                                
                            /* Push the container to the custom Registry */
                             customImage.push()
                             
                         }

                }


            }
        
        
        stage ('Staging') {
            container('kubectl'){

      withKubeConfig([credentialsId: 'app_k8s_secret', serverUrl: "${APP_CLUSTER_URL}"]) {
          sh """
               echo acrsharedcommon81948.azurecr.io/$imageName 
               kubectl create namespace $TEAM 
               kubectl get pods -n jenkins
               kubectl run $app --image=acrsharedcommon81948.azurecr.io/$imageName  -n $TEAM 
             """
         
                }


               }
        }
        
        
         stage ('Production') {
            sh 'echo "Deploying to production environment"'
        }
        

        
        }

    
        
    }


